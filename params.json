{
  "name": "Voicecalculator",
  "tagline": "Calculadora simples controlada por voz desenvolvida com Python",
  "body": "#<p align='center'>COE363 - Telecomunicações - UFRJ 2016.2</p>\r\n<p align='center'>VoiceCalculator - Calculadora comandado por voz</p>\r\n\r\nTrabalho desenvolvido por: [Marcos Aurélio](https://github.com/Maasouza) e [Anna Gabrielle](https://github.com/AnnaGabrielle)<br>\r\nPara a disciplina do Profº. Fernando Gil\r\n\r\n1. Tecnologias\r\n    * Python  \r\n2. Bibliotecas utilizadas\r\n    <ul>\r\n      <li>[Scipy](https://www.scipy.org/) - Biblioteca que fornece algumas funções matemáticas.</li>\r\n      <li>[PyAudio](https://people.csail.mit.edu/hubert/pyaudio/) - Biblioteca utilizada para gravação dos áudios</li>\r\n      <li>[FastDTW](https://pypi.python.org/pypi/fastdtw/0.3.0) - Biblioteca que fornece o algoritmo DTW para calcular a distancia entres os áudios</li>\r\n      <li>[Python Speech Features](https://github.com/jameslyons/python_speech_features) - Biblioteca utilizada para retirada dos MFCCs</li>\r\n    </ul>\r\n\r\n3. Modulos  \r\n    \r\n    * Gravação  \r\n\r\n            Modulo base do trabalho  \r\n            Contém a classe VoiceRecorder que contem as funções necessarias para a gravação dos audios \r\n    \r\n    * Treinamento  \r\n\r\n            Derivado do modulo de gravação  \r\n            Ele é responsavel por gravar os audios, retirar os parametros e calcular os centroides\r\n            Gera arquivos contendos os centroides que serão lidos pelo modulo de reconhecimento  \r\n    \r\n    * Reconhecimento  \r\n\r\n            Modulo que recebe os arquivos gerados pelo modulo de treinamento  \r\n            Ele é responsavel por gravar e comparar os audios de entradas com os do treinamento  \r\n            No final de sua execução gerar uma string que será tratada no modulo Traduto  \r\n\r\n    * Tradutor  \r\n\r\n            Modulo genérico\r\n            Responsavel por receber uma string e converter para funções\r\n            No nosso caso transforma string em operações numéricas  \r\n            \r\n4. Instruções  \r\n  \r\n   * Clone o repositorio ou realize o download  \r\n   \r\n   * Tenha os itens citados no topico 2 instalados  \r\n   \r\n   * Crie um arquivo como este exemplo para realizar o treinamento  \r\n   \r\n         ```python\r\n         from training import *\r\n         palavras = [\"lista\",\"de\",\"palavras\"]\r\n         num_gravacoes = 4\r\n         pasta_destino = \"caminho/para/pasta/que/vai/conter/os/arquivos/\"\r\n         treinamento = VoiceTrainer(palavras,num_gravacoes,pasta_destino)\r\n         ```\r\n         \r\n   * Crie um arquivo como este de exemplo para executar o reconhecimento\r\n\r\n         ```python\r\n         from recognizing import *\r\n         palavras = [\"lista\",\"de\",\"palavras\"]\r\n         pasta_dados = \"pasta/que/contem/os/arquivos/gerados/no/treino\"\r\n         reconhecedor = VoiceRocognizer(palavras,pasta_dados)\r\n         continua = True\r\n         frase = \"\"\r\n         while(continua):\r\n            dados = reconhecedor.extract_params()\r\n            palavra = reconhecedor.compare(dados)\r\n            if(palavra satisfaz condição de parada):\r\n               continua = False\r\n            frase.append(palavra)\r\n         tradutor = casting()\r\n         tradutor.execute(frase)\r\n         ```\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}